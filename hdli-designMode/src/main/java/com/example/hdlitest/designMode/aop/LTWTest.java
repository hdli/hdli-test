package com.example.hdlitest.designMode.aop;

/**
 * @author 李会东
 * @version 1.0
 * @date 2019-12-26 18:11
 */
public class LTWTest {

    /**
     * https://www.cnblogs.com/takumicx/p/10150344.html
     *
     * AOP——面向切面编程,通过为目标类织入切面的方式,实现对目标类功能的增强。按切面被织如到目标类中的时间划分,主要有以下几种:
     *
     *     1.运行期织入
     *     这是最常见的,比如在运行期通过为目标类生成动态代理的方式实现AOP就属于运行期织入,这也是Spring AOP中的默认实现,并且提供了两种创建动态代理的方式:JDK自带的针对接口的动态代理和使用CGLib动态创建子类的方式创建动态代理。
     *
     *     2.编译期织入
     *     使用特殊的编译器在编译期将切面织入目标类,这种比较少见,因为需要特殊的编译器的支持。
     *
     *     3.类加载期织入
     *     通过字节码编辑技术在类加载期将切面织入目标类中,这是本篇介绍的重点。它的核心思想是:在目标类的class文件被JVM加载前,通过自定义类加载器或者类文件转换器将横切逻辑织入到目标类的class文件中,然后将修改后class文件交给JVM加载。这种织入方式可以简称为LTW(LoadTimeWeaving)
     */
}
